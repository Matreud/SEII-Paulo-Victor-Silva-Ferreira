Um processo é uma instância de execução de uma aplicação. Processos são reconhecidos por um número único chamado PID (Process ID). Esse número pode ser obtido através do uso do comando -ps. Utilizando esse identificador, processos podem ser manipulados e finalizados.  
Processos podem ser criados através dos comandos system, fork e exec. Por padrão, esses processos possuem a mesma prioridade, sem qualquer garantia de tempo ou ordem de execução. Essa prioridade pode ser alterada através do parâmetro niceness. Esse parâmetro é 0 por padrão e pode ser aumentado para diminuir sua prioridade ou diminuído para aumentar sua prioridade.
Processos se comunicam entre si através do uso de sinais. Esses sinais são comandos assíncronos, ou seja, eles interrompem os processos nos quais são recebidos para alterar o funcionamento do código. Por padrão, cada tipo de sinal possui um comportamento padrão que ele instaura num processo que o receba, mas usuários podem especificar um comportamento diferente através de um signal handler. 
As formas mais comuns de utilização do sinal são as automáticas e os encerramentos de processos. O linux automaticamente manda sinais como parte de seu funcionamento. Usuários podem encerrar processos seletivamente utilizando sinais apropriados. 
É importante ressaltar que, por serem assíncronos, os sinais podem interromper processos em momentos imprevisíveis e especialmente em momentos de fragilidade. Por isso, é importante que signal handlers sejam breves, fazendo apenas o necessário para elicitar a resposta desejada do processo. Deve-se também evitar o uso de bibliotecas e funções de sistema, assim como operações de I/O. 
Processos são terminados principalmente de duas maneiras: pelo retorno da main ou pela chamada da função exit. Um processo também pode terminar de maneira anormal, em resposta a um erro ou um sinal. Nesse caso, o processo retorna um número que indica o que aconteceu. 
Em muitos casos, é interessante que um processo pai espere um processo filho finalize um processo antes de continuar sua execução. Para este fim, podemos usar o comando wait, que bloqueia o processo até que um de seus processos filhos finalizem. 
É possível que um processo filho seja finalizado sem que o processo pai tenha chamado a função wait, gerando o que nós chamamos de um processo zumbi. Um processo zumbi é um processo filho finalizado mas que ainda não foi deletado, e é preciso que o pai delete esse processo. A função wait faz isso mesmo se chamada após o encerramento do processo filho. É comum que as funções wait3 e wait4 sejam chamadas periodicamente para limpar esses processos zumbi.